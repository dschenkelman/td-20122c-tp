<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=4.4.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
  </configSections>
  <unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
    <typeAliases>
      <!-- Lifetime manager types -->
      <typeAlias alias="singleton"
           type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager,
             Microsoft.Practices.Unity" />
      <typeAlias alias="external"
           type="Microsoft.Practices.Unity.ExternallyControlledLifetimeManager,
             Microsoft.Practices.Unity" />
      <typeAlias alias="perThread"
           type="Microsoft.Practices.Unity.PerThreadLifetimeManager,
             Microsoft.Practices.Unity" />
    </typeAliases>
    <container>
      <register type="CourseManagement.MessageProcessing.Actions.IActionFactory,
                CourseManagement.MessageProcessing"
                mapTo="CourseManagement.MessageProcessing.Actions.UnityActionFactory,
                CourseManagement.MessageProcessing">
        <lifetime type="singleton" />
      </register>
      <register type="CourseManagement.MessageProcessing.Actions.IActionFinder,
                CourseManagement.MessageProcessing"
                mapTo="CourseManagement.MessageProcessing.Actions.ConfigurationActionFinder, 
                CourseManagement.MessageProcessing">
        <lifetime type="singleton" />
      </register>
      <register type="CourseManagement.MessageProcessing.Actions.IXmlActionReader,
                CourseManagement.MessageProcessing"
                mapTo="CourseManagement.MessageProcessing.Actions.XmlActionReader,
                CourseManagement.MessageProcessing">
        <lifetime type="singleton" />
      </register>
      <register type="CourseManagement.Persistence.Configuration.IConfigurationService,
                CourseManagement.Persistence"
                mapTo="CourseManagement.Persistence.Configuration.ConfigurationService,
                CourseManagement.Persistence" >
        <lifetime type="singleton" />
      </register>
      <register type="CourseManagement.MessageProcessing.Rules.IRuleFactory,
                CourseManagement.MessageProcessing"
                mapTo="CourseManagement.MessageProcessing.Rules.UnityRuleFactory,
                CourseManagement.MessageProcessing" >
        <lifetime type="singleton" />
      </register>
      <register type="CourseManagement.MessageProcessing.Rules.IXmlRuleReader,
                CourseManagement.MessageProcessing"
                mapTo="CourseManagement.MessageProcessing.Rules.XmlRuleReader,
                CourseManagement.MessageProcessing" >
        <lifetime type="singleton" />
      </register>
      <register type="CourseManagement.MessageProcessing.Rules.IRuleFinder,
                CourseManagement.MessageProcessing"
                mapTo="CourseManagement.MessageProcessing.Rules.ConfigurationRuleFinder,
                CourseManagement.MessageProcessing" >
        <lifetime type="singleton" />
      </register>
      <register type="CourseManagement.Persistence.Repositories.ICourseManagementRepositories,
                CourseManagement.Persistence"
              mapTo="CourseManagement.Persistence.Repositories.CourseManagementRepositories,
                CourseManagement.Persistence" >
        <lifetime type="singleton" />
      </register>
      <register type="CourseManagement.Persistence.Logging.ILogger,
                CourseManagement.Persistence"
        mapTo="CourseManagement.Persistence.Logging.FileLogger,
                CourseManagement.Persistence" >
        <lifetime type="singleton" />
      </register>
      <register type="CourseManagement.Persistence.ICourseManagementContext,
                CourseManagement.Persistence"
                mapTo="CourseManagement.Persistence.CourseManagementContext,
                CourseManagement.Persistence" />
      <register type="CourseManagement.Persistence.Repositories.IRepository`1[[CourseManagement.Model.DeliverableAttachment, CourseManagement.Model]],
                CourseManagement.Persistence"
                mapTo="CourseManagement.Persistence.Repositories.Repository`1[[CourseManagement.Model.DeliverableAttachment, CourseManagement.Model]],
                CourseManagement.Persistence" />
      <register type="CourseManagement.Persistence.Repositories.IRepository`1[[CourseManagement.Model.TicketAttachment, CourseManagement.Model]],
                CourseManagement.Persistence"
                mapTo="CourseManagement.Persistence.Repositories.Repository`1[[CourseManagement.Model.TicketAttachment, CourseManagement.Model]],
                CourseManagement.Persistence" />
      <register type="CourseManagement.Persistence.Repositories.IRepository`1[[CourseManagement.Model.Course, CourseManagement.Model]],
                CourseManagement.Persistence"
                mapTo="CourseManagement.Persistence.Repositories.Repository`1[[CourseManagement.Model.Course, CourseManagement.Model]],
                CourseManagement.Persistence" />
      <register type="CourseManagement.Persistence.Repositories.IRepository`1[[CourseManagement.Model.Deliverable, CourseManagement.Model]],
                CourseManagement.Persistence"
                mapTo="CourseManagement.Persistence.Repositories.Repository`1[[CourseManagement.Model.Deliverable, CourseManagement.Model]],
                CourseManagement.Persistence" />
      <register type="CourseManagement.Persistence.Repositories.IRepository`1[[CourseManagement.Model.Group, CourseManagement.Model]],
                CourseManagement.Persistence"
                mapTo="CourseManagement.Persistence.Repositories.Repository`1[[CourseManagement.Model.Group, CourseManagement.Model]],
                CourseManagement.Persistence" />
      <register type="CourseManagement.Persistence.Repositories.IRepository`1[[CourseManagement.Model.Reply, CourseManagement.Model]],
                CourseManagement.Persistence"
                mapTo="CourseManagement.Persistence.Repositories.Repository`1[[CourseManagement.Model.Reply, CourseManagement.Model]],
                CourseManagement.Persistence" />
      <register type="CourseManagement.Persistence.Repositories.IRepository`1[[CourseManagement.Model.Student, CourseManagement.Model]],
                CourseManagement.Persistence"
                mapTo="CourseManagement.Persistence.Repositories.Repository`1[[CourseManagement.Model.Student, CourseManagement.Model]],
                CourseManagement.Persistence" />
      <register type="CourseManagement.Persistence.Repositories.IRepository`1[[CourseManagement.Model.Subject, CourseManagement.Model]],
                CourseManagement.Persistence"
                mapTo="CourseManagement.Persistence.Repositories.Repository`1[[CourseManagement.Model.Subject, CourseManagement.Model]],
                CourseManagement.Persistence" />
      <register type="CourseManagement.Persistence.Repositories.IRepository`1[[CourseManagement.Model.Teacher, CourseManagement.Model]],
                CourseManagement.Persistence"
                mapTo="CourseManagement.Persistence.Repositories.Repository`1[[CourseManagement.Model.Teacher, CourseManagement.Model]],
                CourseManagement.Persistence" />
      <register type="CourseManagement.Persistence.Repositories.IRepository`1[[CourseManagement.Model.Ticket, CourseManagement.Model]],
                CourseManagement.Persistence"
                mapTo="CourseManagement.Persistence.Repositories.Repository`1[[CourseManagement.Model.Ticket, CourseManagement.Model]],
                CourseManagement.Persistence" />
      <register type="CourseManagement.Persistence.Repositories.IRepository`1[[CourseManagement.Model.Account, CourseManagement.Model]],
                CourseManagement.Persistence"
                mapTo="CourseManagement.Persistence.Repositories.Repository`1[[CourseManagement.Model.Account, CourseManagement.Model]],
                CourseManagement.Persistence" />
      <register type="CourseManagement.Persistence.Repositories.IRepository`1[[CourseManagement.Model.Configuration, CourseManagement.Model]],
                CourseManagement.Persistence"
                mapTo="CourseManagement.Persistence.Repositories.Repository`1[[CourseManagement.Model.Configuration, CourseManagement.Model]],
                CourseManagement.Persistence" />
      <register type="CourseManagement.Messages.IMessageReceiver, CourseManagement.Messages" 
                mapTo="CourseManagement.Messages.PopMessageReceiver, CourseManagement.Messages" />
      <register type="CourseManagement.Messages.IMessageSender, CourseManagement.Messages"
                mapTo="CourseManagement.Messages.SmtpMessageSender, CourseManagement.Messages" />
      <register type="CourseManagement.MessageProcessing.Actions.IGroupFileParser,CourseManagement.MessageProcessing"
                mapTo="CourseManagement.MessageProcessing.Actions.GroupFileParser,CourseManagement.MessageProcessing" >
        <lifetime type="singleton" />
      </register>
      <register type="CourseManagement.MessageProcessing.Rules.BaseRule, CourseManagement.MessageProcessing" 
                mapTo="CourseManagement.MessageProcessing.Rules.AddDeliverableToGroupDatabaseEntryRule, CourseManagement.MessageProcessing" 
                name="AddDeliverable" />
      <register type="CourseManagement.MessageProcessing.Rules.BaseRule, CourseManagement.MessageProcessing"
                mapTo="CourseManagement.MessageProcessing.Rules.FallbackRule, CourseManagement.MessageProcessing"
                name="Fallback" />
      <register type="CourseManagement.MessageProcessing.Rules.BaseRule, CourseManagement.MessageProcessing"
                mapTo="CourseManagement.MessageProcessing.Rules.NewGroupInCourseRule, CourseManagement.MessageProcessing"
                name="NewGroup" />
      <register type="CourseManagement.MessageProcessing.Rules.BaseRule, CourseManagement.MessageProcessing"
                mapTo="CourseManagement.MessageProcessing.Rules.NewStudentInCourseRule, CourseManagement.MessageProcessing"
                name="NewStudent" />
      <register type="CourseManagement.MessageProcessing.Rules.BaseRule, CourseManagement.MessageProcessing"
                mapTo="CourseManagement.MessageProcessing.Rules.AddNewTicketToDatabaseRule, CourseManagement.MessageProcessing"
                name="AddTicket" />
      <register type="CourseManagement.MessageProcessing.Rules.BaseRule, CourseManagement.MessageProcessing"
                mapTo="CourseManagement.MessageProcessing.Rules.AddTicketReplyToDatabaseRule, CourseManagement.MessageProcessing"
                name="TicketReply" />
      <register type="CourseManagement.MessageProcessing.Actions.IAction, CourseManagement.MessageProcessing"
                mapTo="CourseManagement.MessageProcessing.Actions.AddDeliverableToGroupDatabaseEntryAction, CourseManagement.MessageProcessing"
                name="AddDeliverable" />
      <register type="CourseManagement.MessageProcessing.Actions.IAction, CourseManagement.MessageProcessing"
                mapTo="CourseManagement.MessageProcessing.Actions.AddGroupToCourseDatabaseEntryAction, CourseManagement.MessageProcessing"
                name="AddGroup" />
      <register type="CourseManagement.MessageProcessing.Actions.IAction, CourseManagement.MessageProcessing"
                mapTo="CourseManagement.MessageProcessing.Actions.CreateEmailReplyAction, CourseManagement.MessageProcessing"
                name="EmailReply" />
      <register type="CourseManagement.MessageProcessing.Actions.IAction, CourseManagement.MessageProcessing"
                mapTo="CourseManagement.MessageProcessing.Actions.NewTicketEmailReplyAction, CourseManagement.MessageProcessing"
                name="NewTicketEmailReply" />
      <register type="CourseManagement.MessageProcessing.Actions.IAction, CourseManagement.MessageProcessing"
                mapTo="CourseManagement.MessageProcessing.Actions.NewStudentToCourseDatabaseEntryAction, CourseManagement.MessageProcessing"
                name="NewStudent" />
      <register type="CourseManagement.MessageProcessing.Actions.IAction, CourseManagement.MessageProcessing"
                mapTo="CourseManagement.MessageProcessing.Actions.RelateTicketReplyToTicketAction, CourseManagement.MessageProcessing"
                name="RelateTicketToReply" />
      <register type="CourseManagement.MessageProcessing.Actions.IAction, CourseManagement.MessageProcessing"
                mapTo="CourseManagement.MessageProcessing.Actions.DownloadReplyAttachmentsAction, CourseManagement.MessageProcessing"
                name="DownloadReplyAttachments" />
      <register type="CourseManagement.MessageProcessing.Actions.IAction, CourseManagement.MessageProcessing"
                mapTo="CourseManagement.MessageProcessing.Actions.AddTicketToDatabaseAction, CourseManagement.MessageProcessing"
                name="AddTicket" />
    </container>
  </unity>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0" />
  </startup>
  <appSettings>
    <add key="RulesConfigurationFilePath" value="Rules.xml" />
    <add key="MonitoredSubjectId" value="1" />
    <add key="IncomingMessageProtocol" value="pop" />
    <add key="OutgoingMessageProtocol" value="smtp" />
    <add key="AttachmentsRootPath" value="Attachments"/>
	<add key="LogFile" value="log.txt"/>
  </appSettings>
  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.SqlConnectionFactory, EntityFramework" />
  </entityFramework>
</configuration>